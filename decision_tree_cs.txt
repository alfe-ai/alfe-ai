Node cheat-sheet
ID	Purpose	Implementation sketch
A	Periodically poll queue / Slack / HTTP endpoint for a task.	asyncio.sleep loop or WebSocket listener inside VM.
B	Parse natural-language request; extract acceptance criteria.	Quick LLM call + regex to detect code vs data vs ops.
C / C1	Decide if more context is needed.	If missing repo/entry point, call ssh echo to notify user and wait.
D	Domain routing.	Map to handler classes (e.g., CodeTask, SysTask).
E	Plan creation: break into shell-level steps.	Use planner LLM: “Create a bash command list to …”.
F / F1	Privilege escalation path.	Avoid if possible; otherwise request one-time sudo secret via secure channel.
G	Workspace bootstrap.	git clone, python3 -m venv, apt-get install -y build-essential ‑- all scripted.
H-J-I1	Main execution & self-healing loop.	Run under bash -c, capture stdout/stderr; on error feed logs back into LLM to suggest fixes; limit retries (e.g., 3).
K	Bundle artifacts for review.	Collate test results, produce diff/patch or compiled binary.
L / M	Non-blocking poll for human oversight.	Send Markdown summary to user; watch for reactions or additional prompts.
N	Deliverables.	scp to host, push to Git, or upload to object store.
O	House-keeping.	Delete temporary files, retain ~/artifacts/<task-id> for audit.

Tips for coding the agent loop
Use async Python with an SSH library like asyncssh to maintain one persistent shell channel for efficiency.

Represent each decision node as a coroutine; plug them together with a small finite-state-machine (FSM) driver.

Store task state in a lightweight SQLite DB inside the VM so recovery after a reboot resumes mid-flow.

Log every action (command, exit_code, stdout, stderr) to a rolling file + optional Elastic/Promtail target for observability.

Abstract the user-interaction layer: today it might be a Slack bot; tomorrow a web dashboard. Keep the poll/ask/notify primitives generic.

That tree should give your Alfe AI agent a clear, auditable control-flow while still leaving room for iterative improvements (e.g., adding a “safety sandbox” branch, more granular retry logic, or time-outs on long-running commands). Let me know if you’d like code scaffolding for the FSM or examples of self-repair prompts!


